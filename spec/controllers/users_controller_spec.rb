require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
require 'helpers/setup'

RSpec.describe UsersController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {{nom:"foo", prenom:"my", sexe:"m", adresse:"7", email: "hghjg98@gmail.com", password:"32105468"}

  }
  
  let(:invalid_attributes) {
    {nom:"foo", prenom:"", sexe:"m", adresse:"7", email: "h7ghjg@gmail.com", password:"32105468"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {user_id: @user.id} }
  
  let(:invalid_session_log) { }

  describe "GET #index" do
    context "i'm logged", :owner do
      it "assigns all users as @users" do
        user = User.create! valid_attributes
        get :index, {}
        expect(assigns(:users)).to eq(User.all)
      end
    end
    
    context "i'm not logged" do
      it "if your aren't log  SOTP ACCESSING MY BD" do
        get :index, {}
        expect(response).to redirect_to new_user_session_url
      end
    end
  end

  describe "GET #show" do
    context "i'm logged", :owner do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        valid_session = {user_id:user.to_param}
        get :show, {:id => user.to_param}
        expect(assigns(:user)).to eq(assigns(:current_user))
      end
    end
   
    context "i'm admin!", :admin do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes     
        get :show, {:id => user.to_param}
        expect(assigns(:user)).to eq(user)
      end
    end
    
    context "i'm not logged" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes  
        get :show, {:id => user.to_param}
        expect(assigns(:user)).to redirect_to new_user_session_url
      end
    end
  end

  describe "GET #new" do
    context "i'm logged", :owner do
      it "already connected but still create fake users..." do
        user = User.create! valid_attributes
        get :new, {}, {user_id:user.id}
        expect(assigns(:user)).to be_a_new(User)
        expect(response).to redirect_to(new_user_session_url)
      end
    end
    
    context "i'm admin", :admin do
      it "let me in, i'm admin and i want to create fake users..." do
        get :new, {}
        expect(assigns(:user)).to be_a_new(User)
      end
    end
    
    context "i'm not logged" do
      it "assigns a new user as @user" do
        get :new, {}
        expect(assigns(:user)).to be_a_new(User)
      end 
    end    
  end

  describe "GET #edit" do
    context "i'm  admin", :admin do
      it "i'm admin edit me user secret account!" do
        user = User.create! valid_attributes     
        valid_session = {user_id:User.first.id}
        get :show, {:id => user.to_param}
        expect(assigns(:user)).to eq(user)
      end 
    end
    
    context "i'm logged", :owner do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        valid_session = {user_id:user.to_param}
        get :edit, {:id => user.to_param}
        expect(assigns(:user)).to eq(assigns(:current_user))
      end
    end
    
    context "i'm not logged" do
      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        valid_session = {user_id:user.to_param}
        get :edit, {:id => user.to_param}
        expect(assigns(:user)).to eq(user)
        expect(assigns(:user)).to redirect_to new_user_session_url
      end
    end
  end

  describe "DELETE #destroy" do
    context "i'm admin", :admin do
      let(:new_attributes) {
        {nom:"Boo", prenom:"my", sexe:"m", adresse:"7", email: "hphjg@gmail.com", password:"32105468"}
      }
      it "destroys the requested user" do
        user = User.create! valid_attributes
        user = User.create! new_attributes
        expect {
          delete :destroy, {:id => user.to_param}
        }.to change(User, :count).by(-1)
      end
  
      it "redirects to the users list" do
        user = User.create! valid_attributes
        delete :destroy, {:id => user.to_param}
        expect(response).to redirect_to(users_url)
      end
    end
    
    context "i'm not admin", :owner do
      let(:new_attributes) {
        {nom:"Boo", prenom:"my", sexe:"m", adresse:"7", email: "hghjg@gmail.com", password:"32105468"}
      }
      
      it "doesn't change anything" do
        user = User.create! valid_attributes
        user = User.create! new_attributes
        expect {
          delete :destroy, {:id => user.to_param}
        }.to change(User, :count).by(-0)
        expect(response).to redirect_to(root_url)
      end
    end
  end

end
