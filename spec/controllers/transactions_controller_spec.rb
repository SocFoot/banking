require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
require 'helpers/setup'

RSpec.describe TransactionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Transaction. As you add validations to Transaction, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { libelle: "er",  out: 78,  account_id:@account_id}
  }

  let(:invalid_attributes) {
    { libelle: "er", :in => 0, :out =>0}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TransactionsController. Be sure to keep this updated too.
  let(:valid_session) { { user_id: @user.id } }

  let(:valid_admin_session) {
    {user_id:User.first.id}
  }
  
  let(:invalid_session) { {user_id: nil} }
  
  let(:invalid_owner_session) {{user_id: User.third.id}}
  
  describe "GET #index" do
    context "i'm admin", :admin do
      it "assigns all transactions as @transactions" do
        transaction = Transaction.create! valid_attributes
        get :index, {}
        expect(assigns(:transactions)).to eq(Transaction.all)
      end
    end
    
    context "i'm logged", :owner do
      it "assigns all transactions as @transactions" do
        transaction = Transaction.create! valid_attributes
        get :index, {}
        expect(assigns(:transactions)).to eq(Transaction.tri(@user.id))
      end
    end
    
    context "i'm not logged" do
      it "assigns all transactions as @transactions" do
        transaction = Transaction.create! valid_attributes
        get :index, {}
        expect(response).to redirect_to new_user_session_url
      end
    end
  end

  describe "GET #show" do
    context "i'm admin", :admin do
      it "assigns the requested transaction as @transaction" do
        transaction = Transaction.create! valid_attributes
        get :show, {:id => transaction.to_param}
        expect(assigns(:transaction)).to eq(transaction)
        expect(response.status).to eq(200)
      end
    end
    
    context "i'm owner", :owner do
      it "assigns the requested transaction as @transaction" do
        transaction = Transaction.create! valid_attributes
        get :show, {:id => transaction.to_param}
        expect(assigns(:transaction)).to eq(transaction)
        expect(response.status).to eq(200)
      end
    end
    
    context "i'm not owner", :not_owner do
      it "assigns the requested transaction as @transaction" do
        transaction = Transaction.create! valid_attributes
        get :show, {:id => transaction.to_param}
        expect(response).to redirect_to root_url
      end
    end
    
    context "i'm not logged" do
      it "assigns the requested transaction as @transaction" do
        transaction = Transaction.create! valid_attributes
        get :show, {:id => transaction.to_param}
        expect(response).to redirect_to new_user_session_url
      end
    end
  end

  describe "GET #new" do
    context "i'm admin", :admin do
      it "assigns a new transaction as @transaction" do
        get :new, {}
        expect(assigns(:transaction)).to be_a_new(Transaction)
        expect(response.status).to eq(200)
      end
    end
    
    context "i'm not admin", :owner do
      it "assigns a new transaction as @transaction" do
        get :new, {}
        expect(response).to redirect_to root_url
      end
    end
  end

  describe "GET #edit" do
    context "i'm admin", :admin do
      it "assigns the requested transaction as @transaction" do
        transaction = Transaction.create! valid_attributes
        get :edit, {:id => transaction.to_param}
        expect(assigns(:transaction)).to eq(transaction)
       expect(response.status).to eq(200) 
      end
    end
    
    context "i'm not admin", :owner do
      it "assigns the requested transaction as @transaction" do
        transaction = Transaction.create! valid_attributes
        get :edit, {:id => transaction.to_param}
        expect(assigns(:transaction)).to redirect_to root_url
      end
    end
  end

  describe "POST #create" do
    context "i'm admin", :admin do
      context "with valid params" do
        it "creates a new Transaction" do
          expect {
            post :create, {:transaction => valid_attributes}
          }.to change(Transaction, :count).by(1)
        end
  
        it "assigns a newly created transaction as @transaction" do
          post :create, {:transaction => valid_attributes}
          expect(assigns(:transaction)).to be_a(Transaction)
          expect(assigns(:transaction)).to be_persisted
        end
  
        it "redirects to the created transaction" do
          post :create, {:transaction => valid_attributes}
          expect(response).to redirect_to(Transaction.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved transaction as @transaction" do
          post :create, {:transaction => invalid_attributes}
          expect(assigns(:transaction)).to be_a(Transaction)
        end
  
        it "re-renders the 'new' template" do
          post :create, {:transaction => invalid_attributes}
          expect(response).to render_template("new")
        end
      end
    end
    
    context "i'm not admin", :owner do
      it "doesn't post anything" do
        expect {
          post :create, {:transaction => valid_attributes}
        }.to change(Transaction, :count).by(0)       
      end
      
      it "redirect to root" do
        post :create, {:transaction => valid_attributes}
        expect(response).to redirect_to root_url
      end
    end
  end

  describe "PUT #update" do
    context "i'm admin", :admin do
      context "with valid params" do
        let(:new_attributes) {
          {:zip => 1111111111111111, :libelle => "er", :out => 12}
        }
  
        it "updates the requested transaction" do
          transaction = Transaction.create! valid_attributes
          put :update, {:id => transaction.to_param, :transaction => new_attributes}
          transaction.reload
  
        end
  
        it "assigns the requested transaction as @transaction" do
          transaction = Transaction.create! valid_attributes
          put :update, {:id => transaction.to_param, :transaction => valid_attributes}
          expect(assigns(:transaction)).to eq(transaction)
        end
  
        it "redirects to the transaction" do
          transaction = Transaction.create! valid_attributes
          put :update, {:id => transaction.to_param, :transaction => valid_attributes}
          expect(response).to redirect_to(transaction)
        end
      end
  
      context "with invalid params" do
        it "assigns the transaction as @transaction" do
          transaction = Transaction.create! valid_attributes
          put :update, {:id => transaction.to_param, :transaction => invalid_attributes}
          expect(assigns(:transaction)).to eq(transaction)
          expect(response.status).to eq(200)
        end
  
        it "re-renders the 'edit' template" do
          transaction = Transaction.create! valid_attributes
          put :update, {:id => transaction.to_param, :transaction => invalid_attributes}
          expect(response).to render_template("edit")
        end
      end
    end
    
    context "i'm not admin", :owner do
      let(:new_attributes) {
        {zip:"1111111111111111", libelle:"ll", user_id:"1"}
      }
      it "redirect to root" do
        transaction = Transaction.create! valid_attributes
        put :update, {:id => transaction.to_param, :transaction => invalid_attributes}
        expect(response).to redirect_to root_url
      end
    end
  end

  describe "DELETE #destroy" do
    context "i'm admin", :admin do
      it "destroys the requested transaction" do
        transaction = Transaction.create! valid_attributes
        expect {
          delete :destroy, {:id => transaction.to_param}
        }.to change(Transaction, :count).by(-1)
      end
  
      it "redirects to the transactions list" do
        transaction = Transaction.create! valid_attributes
        delete :destroy, {:id => transaction.to_param}
        expect(response).to redirect_to(transactions_url)
      end
    end
    
    context "i'm not admin", :owner do
      it "destroys nothing account" do
        transaction = Transaction.create! valid_attributes
        expect {
          delete :destroy, {:id => transaction.to_param}
        }.to change(Epargne, :count).by(0)
      end
  
      it "redirects to the accounts list" do
        transaction = Transaction.create! valid_attributes
        delete :destroy, {:id => transaction.to_param}
        expect(response).to redirect_to root_url
      end
    end
  end
end
